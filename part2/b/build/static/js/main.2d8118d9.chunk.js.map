{"version":3,"sources":["services/persons.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPerson","post","id","delete","updatedPerson","put","Notification","message","messageClass","className","Filter","value","handler","onChange","Form","submitHandler","nameValue","nameChangeHandler","numberValue","numberChangeHandler","onSubmit","type","Person","person","handleDelete","name","number","onClick","People","personsToShow","deleteHandler","map","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","newSearch","setNewSearch","NotificationMessage","setNotificationMessage","NotificationClass","setNotificationClass","useEffect","personService","notifyUser","setTimeout","event","target","preventDefault","some","window","confirm","personToUpdate","find","changedPerson","catch","error","console","length","createdPerson","concat","filter","toLowerCase","includes","personName","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2d8118d9.chunk.js","sourcesContent":["import axios from 'axios'\r\n//'https://phonebook-backend-exercises.herokuapp.com/api/persons' \r\n\r\nconst baseUrl = '/api/persons' \r\nconst getPersons = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst addPerson = (newPerson) => {\r\n  const request = axios.post(baseUrl, newPerson)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst updatePerson = (updatedPerson) => {\r\n  const request = axios.put(`${baseUrl}/${updatedPerson.id}`, updatedPerson)\r\n  return request.then(response => response.data)\r\n}\r\nexport default {getPersons, addPerson, deletePerson, updatePerson}","const Notification = ({ message, messageClass}) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className={messageClass}>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons.js'\nimport Notification from './components/Notification.js'\nimport './index.css'\n\nconst Filter = ({value, handler}) => {\n    return (\n        <div>\n            filter shown with: <input value={value} onChange={handler}/>\n        </div>\n    )\n}\nconst Form = ({submitHandler, nameValue, nameChangeHandler, numberValue, numberChangeHandler}) => {\n    return(\n        <form onSubmit={submitHandler}>\n          <div>\n            name: <input value={nameValue} onChange={nameChangeHandler}/>\n          </div>\n          <div>\n            number: <input value={numberValue} onChange={numberChangeHandler}/>\n          </div>\n          <div>\n            <button type=\"submit\">add</button>\n          </div>\n        </form>\n    )\n}\nconst Person = ({person, handleDelete}) => {\n    return (\n        <li key={person.id}>\n            {person.name}: {person.number}\n            <button onClick={() => handleDelete(person.id)}>delete</button>\n        </li>\n    )\n}\n\nconst People = ({personsToShow, deleteHandler}) => {\n    return personsToShow.map(person => <Person person={person} handleDelete={deleteHandler}/>)\n}\n\nconst App = () => {\n    const [persons, setPersons] = useState([]) \n\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [newSearch, setNewSearch] = useState('')\n    const [NotificationMessage, setNotificationMessage] = useState(null)\n    const [NotificationClass, setNotificationClass] = useState('')\n\n    useEffect(() => {\n        personService\n            .getPersons()\n            .then(persons => setPersons(persons))\n    }, [])\n    \n    const notifyUser = (message, className) => {\n        setNewName('')\n        setNewNumber('')\n        setNotificationMessage(message)\n        setNotificationClass(className)\n        setTimeout(() => {\n            setNotificationMessage(null)\n        }, 5000)\n    }\n    const addName = (event) => {\n        event.preventDefault()\n        // Check if name already exists\n        if (persons.some(person => person.name === newName)) {\n            const message = `${newName} has ALREADY been added to Phonebook. Do you want to replace the old number with the new one?`\n            // Confirm update\n            if (window.confirm(message)) {\n                const personToUpdate = persons.find(person => person.name === newName)\n                const changedPerson = {\n                    ...personToUpdate,\n                    number: newNumber\n                }\n                personService\n                    .updatePerson(changedPerson)\n                    .then(updatedPerson => {\n                        setPersons(persons.map(person => \n                            person.id !== updatedPerson.id? person : updatedPerson\n                        ))\n                        setNewName('')\n                        setNewNumber('')\n                        const message = `Updated ${updatedPerson.name}`\n                        notifyUser(message, 'success')\n                    })\n                    .catch(error => {\n                        console.error(error)\n                        personService\n                        .getPersons()\n                        .then(persons => setPersons(persons))\n                        // const message = `${changedPerson.name} was already deleted`\n                        const message = error.response.data.error\n                        notifyUser(message, 'error')\n                    })\n            }\n        }\n        else {\n            const newPerson = {\n                id: persons.length + 1,\n                name: newName,\n                number: newNumber\n            }\n            personService\n                .addPerson(newPerson)\n                .then(createdPerson => {\n                    setPersons(persons.concat(createdPerson))\n                    const message = `Added ${createdPerson.name}`\n                    notifyUser(message, 'success')\n                })\n                .catch(error => {\n                    const message = error.response.data.error\n                    // const message = `${newPerson.name} cannot be added!`\n                    notifyUser(message, 'error')\n                })\n        }\n    }\n\n    const deletePerson = (id) => {\n        if (window.confirm('Are you sure you want to delete this perosn?')) {\n            const personName = persons.find(person => person.id === id).name\n            personService\n                .deletePerson(id)\n                .then(() => {\n                    personService\n                        .getPersons()\n                        .then(persons => {\n                            setPersons(persons)\n                            const message = `${personName} successfully deleted`\n                            notifyUser(message, 'success')\n                        })\n                })\n                .catch(error => {\n                    console.error(error)\n                    const message = `${personName} does not exist`\n                    notifyUser(message, 'error')\n                })\n        }\n    }\n\n    const handleNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n    const handleSearchChange = (event) => {\n        setNewSearch(event.target.value)\n    }\n    const showPersons = () => {\n        if (newSearch === '') {\n            return persons;\n        }\n        else {\n            return persons.filter(person => \n                person.name.toLowerCase().includes(newSearch.toLowerCase()))\n        }\n    }\n\n    return (\n      <div>\n        <h2>Phonebook</h2>\n        <Notification message={NotificationMessage} messageClass={NotificationClass}/>\n        <Filter value={newSearch} handler={handleSearchChange}/>\n        <h3>Add New</h3>\n        <Form submitHandler={addName} nameValue={newName} nameChangeHandler={handleNameChange} \n            numberValue={newNumber} numberChangeHandler={handleNumberChange}/>\n        <h2>Numbers</h2>\n        <ul>\n            <People personsToShow={showPersons()} deleteHandler={deletePerson}/>\n        </ul>\n      </div>\n    )\n  }\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n)"],"sourceRoot":""}